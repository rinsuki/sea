version: "2.4"

x-variables:
  POSTGRES_PASSWORD: &POSTGRES_PASSWORD "password"
  POSTGRES_DB: &POSTGRES_DB "sea"
  POSTGRES_URL: &POSTGRES_URL "postgresql://postgres:password@postgres/sea"
  MINIO_ACCESS_KEY: &MINIO_ACCESS_KEY "AKIAIOSFODNN7EXAMPLE"
  MINIO_SECRET_KEY: &MINIO_SECRET_KEY "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"

volumes:
  postgres-data:
    driver: 'local'
  minio-data:
    driver: 'local'

services:
  postgres:
    image: postgres:14
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 30
    environment:
      POSTGRES_PASSWORD: *POSTGRES_PASSWORD
      POSTGRES_DB: *POSTGRES_DB

  redis:
    image: redis:5
    restart: unless-stopped
    networks:
      - default

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - 9000:9000
    environment:
      MINIO_ACCESS_KEY: *MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: *MINIO_SECRET_KEY
    volumes:
      - minio-data:/mnt/shared
    command: ["minio", "server", "/mnt/shared"]

  sea:
    build: .
    ports:
      - "${PORT:-5000}:${PORT:-5000}"
    environment:
      NODE_ENV: "development"
      # docker local network
      DATABASE_URL: *POSTGRES_URL
      REDIS_URL: "redis://redis"
      AWS_ACCESS_KEY_ID: *MINIO_ACCESS_KEY
      AWS_SECRET_ACCESS_KEY: *MINIO_SECRET_KEY
      S3_ENDPOINT: "http://minio:9000"
      S3_BUCKET: "shared"
      S3_PUBLIC_URL: "http://localhost:9000/shared/"
      S3_FORCE_USE_PATH_STYLE: "yes"
      FORCE_HTTPS: ""
      # from environment variables
      PORT: "${PORT:-5000}"
      SW_SUBJECT: "dev:${SW_SUBJECT}"
      SW_KEY_PUBLIC: "${SW_KEY_PUBLIC}"
      SW_KEY_PRIVATE: "${SW_KEY_PRIVATE}"
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./docker-files:/app/docker-files
      - ./package.json:/app/package.json
      - ./yarn.lock:/app/yarn.lock
      - ./views:/app/views
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    command: [
      "sh", "-c",
      "yarn && node ./docker-files/init.js && yarn tsc-watch --onFirstSuccess 'yarn migration:up' --onSuccess 'sh -c \" yarn && node . \" '"
    ]
